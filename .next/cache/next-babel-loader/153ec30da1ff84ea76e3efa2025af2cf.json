{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState } from 'react';\nexport default function FetchMore(_ref) {\n  var children = _ref.children,\n      service = _ref.service,\n      start = _ref.start,\n      limit = _ref.limit;\n\n  var _useState = useState(start),\n      lastStart = _useState[0],\n      setLastStart = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isDone = _useState3[0],\n      setIsDone = _useState3[1];\n\n  var _useState4 = useState([]),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var fetchMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.next = 3;\n              return service({\n                start: lastStart,\n                limit: limit\n              });\n\n            case 3:\n              newData = _context.sent;\n              setIsLoading(false);\n              setLastStart(lastStart + newData.length);\n              setData(data.concat(newData));\n\n              if (newData.length < limit) {\n                setIsDone(true);\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return children({\n    data: data,\n    fetchMore: fetchMore,\n    isLoading: isLoading,\n    isDone: isDone\n  });\n}","map":null,"metadata":{},"sourceType":"module"}