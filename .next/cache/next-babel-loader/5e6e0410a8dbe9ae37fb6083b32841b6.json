{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeObservable, observable, action } from 'mobx';\nimport uniqueId from 'lodash/uniqueId';\nexport default class ErrorStore {\n  constructor(rootStore) {\n    this.expired = 5000;\n    this.errors = [];\n    // this.rootStore = rootStore\n    makeObservable(this, {\n      errors: observable,\n      addError: action,\n      removeError: action\n    });\n  }\n\n  addError(error) {\n    const id = uniqueId();\n    this.errors.push(_objectSpread(_objectSpread({}, error), {}, {\n      id\n    }));\n    setTimeout(() => {\n      this.removeError(id);\n    }, this.expired);\n  }\n\n  removeError(id) {\n    this.errors = this.errors.filter(error => error.id !== id);\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/modules/_error/store.js"],"names":["makeObservable","observable","action","uniqueId","ErrorStore","constructor","rootStore","expired","errors","addError","removeError","error","id","push","setTimeout","filter"],"mappings":";;;;;;AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,MAAnD;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAI9BC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAHvBC,OAGuB,GAHb,IAGa;AAAA,SAFvBC,MAEuB,GAFd,EAEc;AACrB;AAEAR,IAAAA,cAAc,CAAC,IAAD,EAAO;AACnBQ,MAAAA,MAAM,EAAEP,UADW;AAEnBQ,MAAAA,QAAQ,EAAEP,MAFS;AAGnBQ,MAAAA,WAAW,EAAER;AAHM,KAAP,CAAd;AAKD;;AAEDO,EAAAA,QAAQ,CAACE,KAAD,EAAQ;AACd,UAAMC,EAAE,GAAGT,QAAQ,EAAnB;AAEA,SAAKK,MAAL,CAAYK,IAAZ,iCACKF,KADL;AAEEC,MAAAA;AAFF;AAKAE,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKJ,WAAL,CAAiBE,EAAjB;AACD,KAFS,EAEP,KAAKL,OAFE,CAAV;AAGD;;AAEDG,EAAAA,WAAW,CAACE,EAAD,EAAK;AACd,SAAKJ,MAAL,GAAc,KAAKA,MAAL,CAAYO,MAAZ,CAAmBJ,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAAzC,CAAd;AACD;;AA7B6B","sourcesContent":["import { makeObservable, observable, action } from 'mobx'\nimport uniqueId from 'lodash/uniqueId'\n\nexport default class ErrorStore {\n  expired = 5000\n  errors = []\n\n  constructor(rootStore) {\n    // this.rootStore = rootStore\n\n    makeObservable(this, {\n      errors: observable,\n      addError: action,\n      removeError: action,\n    })\n  }\n\n  addError(error) {\n    const id = uniqueId()\n\n    this.errors.push({\n      ...error,\n      id,\n    })\n\n    setTimeout(() => {\n      this.removeError(id)\n    }, this.expired)\n  }\n\n  removeError(id) {\n    this.errors = this.errors.filter(error => error.id !== id)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}