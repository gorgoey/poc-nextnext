{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/lib/page/Page/Meta.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Fragment } from 'react';\nimport trimEnd from 'lodash/trimEnd';\nimport { useRouter } from 'next/router';\nimport { DefaultSeo, NextSeo } from 'next-seo';\nexport default function Meta(_ref) {\n  _s();\n\n  var data = _ref.data,\n      _ref$metaConfig = _ref.metaConfig,\n      metaConfig = _ref$metaConfig === void 0 ? {} : _ref$metaConfig;\n  var _metaConfig$getPage = metaConfig.getPage,\n      getPage = _metaConfig$getPage === void 0 ? function () {\n    return 'main';\n  } : _metaConfig$getPage,\n      _metaConfig$getMeta = metaConfig.getMeta,\n      getMeta = _metaConfig$getMeta === void 0 ? function () {} : _metaConfig$getMeta,\n      _metaConfig$getSchema = metaConfig.getSchema,\n      getSchema = _metaConfig$getSchema === void 0 ? function () {} : _metaConfig$getSchema;\n  var page = getPage(data);\n  var meta = getMeta(data) || {};\n  var schemas = getSchema(data) || {};\n  var router = useRouter();\n  var metaUrl = process.env.META_URL || process.env.HOST;\n  var newOgUrl = trimEnd(\"\".concat(metaUrl + router.asPath), '/') + '/';\n  var parsedMeta = meta[page] || {};\n  var schema = schemas[page];\n\n  var openGraph = parsedMeta.openGraph,\n      restMeta = _objectWithoutProperties(parsedMeta, [\"openGraph\"]);\n\n  return _jsxDEV(Fragment, {\n    children: [_jsxDEV(DefaultSeo, {\n      titleTemplate: \"%s\",\n      openGraph: {\n        type: 'website',\n        site_name: 'SiteName'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), _jsxDEV(NextSeo, _objectSpread(_objectSpread({}, restMeta), {}, {\n      canonical: newOgUrl,\n      openGraph: _objectSpread(_objectSpread({}, openGraph), {}, {\n        url: newOgUrl\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), typeof schema === 'function' ? schema() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Meta, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Meta;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meta\");","map":{"version":3,"sources":["/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/lib/page/Page/Meta.js"],"names":["Fragment","trimEnd","useRouter","DefaultSeo","NextSeo","Meta","data","metaConfig","getPage","getMeta","getSchema","page","meta","schemas","router","metaUrl","process","env","META_URL","HOST","newOgUrl","asPath","parsedMeta","schema","openGraph","restMeta","type","site_name","url"],"mappings":";;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,UAApC;AAEA,eAAe,SAASC,IAAT,OAAyC;AAAA;;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,6BAAnBC,UAAmB;AAAA,MAAnBA,UAAmB,gCAAN,EAAM;AAAA,4BAKlDA,UALkD,CAEpDC,OAFoD;AAAA,MAEpDA,OAFoD,oCAE1C;AAAA,WAAM,MAAN;AAAA,GAF0C;AAAA,4BAKlDD,UALkD,CAGpDE,OAHoD;AAAA,MAGpDA,OAHoD,oCAG1C,YAAM,CAAE,CAHkC;AAAA,8BAKlDF,UALkD,CAIpDG,SAJoD;AAAA,MAIpDA,SAJoD,sCAIxC,YAAM,CAAE,CAJgC;AAOtD,MAAMC,IAAI,GAAGH,OAAO,CAACF,IAAD,CAApB;AACA,MAAMM,IAAI,GAAGH,OAAO,CAACH,IAAD,CAAP,IAAiB,EAA9B;AACA,MAAMO,OAAO,GAAGH,SAAS,CAACJ,IAAD,CAAT,IAAmB,EAAnC;AAEA,MAAMQ,MAAM,GAAGZ,SAAS,EAAxB;AACA,MAAMa,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwBF,OAAO,CAACC,GAAR,CAAYE,IAApD;AACA,MAAMC,QAAQ,GAAGnB,OAAO,WAAIc,OAAO,GAAGD,MAAM,CAACO,MAArB,GAA+B,GAA/B,CAAP,GAA6C,GAA9D;AAEA,MAAMC,UAAU,GAAGV,IAAI,CAACD,IAAD,CAAJ,IAAc,EAAjC;AACA,MAAMY,MAAM,GAAGV,OAAO,CAACF,IAAD,CAAtB;;AAhBsD,MAkB9Ca,SAlB8C,GAkBnBF,UAlBmB,CAkB9CE,SAlB8C;AAAA,MAkBhCC,QAlBgC,4BAkBnBH,UAlBmB;;AAoBtD,SACE,QAAC,QAAD;AAAA,eACE,QAAC,UAAD;AACE,MAAA,aAAa,MADf;AAEE,MAAA,SAAS,EAAE;AACTI,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,SAAS,EAAE;AAFF;AAFb;AAAA;AAAA;AAAA;AAAA,YADF,EAQE,QAAC,OAAD,kCACMF,QADN;AAEE,MAAA,SAAS,EAAEL,QAFb;AAGE,MAAA,SAAS,kCAAOI,SAAP;AAAkBI,QAAAA,GAAG,EAAER;AAAvB;AAHX;AAAA;AAAA;AAAA;AAAA,YARF,EAaG,OAAOG,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0C,IAb7C;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GArCuBlB,I;UAWPH,S;;;KAXOG,I","sourcesContent":["import { Fragment } from 'react'\nimport trimEnd from 'lodash/trimEnd'\nimport { useRouter } from 'next/router'\nimport { DefaultSeo, NextSeo } from 'next-seo'\n\nexport default function Meta({ data, metaConfig = {} }) {\n  const {\n    getPage = () => 'main',\n    getMeta = () => {},\n    getSchema = () => {},\n  } = metaConfig\n\n  const page = getPage(data)\n  const meta = getMeta(data) || {}\n  const schemas = getSchema(data) || {}\n\n  const router = useRouter()\n  const metaUrl = process.env.META_URL || process.env.HOST\n  const newOgUrl = trimEnd(`${metaUrl + router.asPath}`, '/') + '/'\n\n  const parsedMeta = meta[page] || {}\n  const schema = schemas[page]\n\n  const { openGraph, ...restMeta } = parsedMeta\n\n  return (\n    <Fragment>\n      <DefaultSeo\n        titleTemplate={`%s`}\n        openGraph={{\n          type: 'website',\n          site_name: 'SiteName',\n        }}\n      />\n      <NextSeo\n        {...restMeta}\n        canonical={newOgUrl}\n        openGraph={{ ...openGraph, url: newOgUrl }}\n      />\n      {typeof schema === 'function' ? schema() : null}\n    </Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}