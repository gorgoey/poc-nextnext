{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/lib/auth/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { parseCookies, setCookie, destroyCookie } from 'nookies';\nimport jwtDecode from 'jwt-decode';\nimport { getAsPathByRouteName } from \"../router/utils\";\nimport * as AuthService from \"../../modules/_auth/services\";\nimport { AUTH_COOKIE_NAME, AUTH_COOKIE_MAX_AGE } from \"../../modules/_auth/config\";\nconst defaultUserData = {\n  isAuthenticated: null,\n  profile: null,\n  token: null\n};\nconst userContext = /*#__PURE__*/React.createContext({});\nexport function useMember() {\n  return useContext(userContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const router = useRouter();\n  const {\n    0: userData,\n    1: setUserData\n  } = useState(defaultUserData); // Initialize user data\n\n  useEffect(() => {\n    const cookies = parseCookies();\n    let tokenInCookie = cookies[AUTH_COOKIE_NAME]; // Auto login if the user has token in cookie\n\n    if (tokenInCookie !== undefined) {\n      signInWithToken(tokenInCookie);\n    } else {\n      setUserData(_objectSpread(_objectSpread({}, defaultUserData), {}, {\n        isAuthenticated: false\n      }));\n    }\n  }, []); // Save token to cookie after sign in\n\n  useEffect(() => {\n    const {\n      isAuthenticated,\n      token\n    } = userData;\n    const cookies = parseCookies();\n    let tokenInCookie = cookies[AUTH_COOKIE_NAME];\n\n    if (isAuthenticated === true && token !== null && !tokenInCookie) {\n      const payload = getDataFromToken(token);\n      const expires = (payload === null || payload === void 0 ? void 0 : payload.exp) || Math.floor(Date.now() / 1000) + AUTH_COOKIE_MAX_AGE;\n      setCookie(null, AUTH_COOKIE_NAME, token, {\n        path: '/',\n        expires: new Date(expires * 1000)\n      });\n    }\n  }, [userData.isAuthenticated]);\n\n  const signInWithToken = token => {\n    setUserData({\n      isAuthenticated: token === null ? null : !!token,\n      profile: getDataFromToken(token),\n      token\n    });\n  };\n\n  const signOut = () => {\n    AuthService.signOut().then(response => {\n      if (response.status === 200) {\n        destroyCookie(null, AUTH_COOKIE_NAME, {\n          path: '/'\n        });\n        setUserData(_objectSpread(_objectSpread({}, defaultUserData), {}, {\n          isAuthenticated: false\n        }));\n        router.push(getAsPathByRouteName('auth-login'));\n      }\n    });\n  };\n\n  return _jsxDEV(userContext.Provider, {\n    value: {\n      userData,\n      signInWithToken,\n      signOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\nfunction getDataFromToken(token) {\n  if (token === null || token === false) return '';\n  return jwtDecode(token);\n}","map":{"version":3,"sources":["/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/lib/auth/index.js"],"names":["React","useState","useEffect","useContext","useRouter","parseCookies","setCookie","destroyCookie","jwtDecode","getAsPathByRouteName","AuthService","AUTH_COOKIE_NAME","AUTH_COOKIE_MAX_AGE","defaultUserData","isAuthenticated","profile","token","userContext","createContext","useMember","AuthProvider","children","router","userData","setUserData","cookies","tokenInCookie","undefined","signInWithToken","payload","getDataFromToken","expires","exp","Math","floor","Date","now","path","signOut","then","response","status","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { useRouter } from 'next/router'\nimport { parseCookies, setCookie, destroyCookie } from 'nookies'\nimport jwtDecode from 'jwt-decode'\n\nimport { getAsPathByRouteName } from '@lib/router/utils'\nimport * as AuthService from '@modules/_auth/services'\nimport { AUTH_COOKIE_NAME, AUTH_COOKIE_MAX_AGE } from '@modules/_auth/config'\n\nconst defaultUserData = {\n  isAuthenticated: null,\n  profile: null,\n  token: null,\n}\n\nconst userContext = React.createContext({})\n\nexport function useMember() {\n  return useContext(userContext)\n}\n\nexport function AuthProvider({ children }) {\n  const router = useRouter()\n  const [userData, setUserData] = useState(defaultUserData)\n\n  // Initialize user data\n  useEffect(() => {\n    const cookies = parseCookies()\n    let tokenInCookie = cookies[AUTH_COOKIE_NAME]\n\n    // Auto login if the user has token in cookie\n    if (tokenInCookie !== undefined) {\n      signInWithToken(tokenInCookie)\n    } else {\n      setUserData({\n        ...defaultUserData,\n        isAuthenticated: false,\n      })\n    }\n  }, [])\n\n  // Save token to cookie after sign in\n  useEffect(() => {\n    const { isAuthenticated, token } = userData\n\n    const cookies = parseCookies()\n    let tokenInCookie = cookies[AUTH_COOKIE_NAME]\n\n    if (isAuthenticated === true && token !== null && !tokenInCookie) {\n      const payload = getDataFromToken(token)\n      const expires =\n        payload?.exp || Math.floor(Date.now() / 1000) + AUTH_COOKIE_MAX_AGE\n\n      setCookie(null, AUTH_COOKIE_NAME, token, {\n        path: '/',\n        expires: new Date(expires * 1000),\n      })\n    }\n  }, [userData.isAuthenticated])\n\n  const signInWithToken = token => {\n    setUserData({\n      isAuthenticated: token === null ? null : !!token,\n      profile: getDataFromToken(token),\n      token,\n    })\n  }\n\n  const signOut = () => {\n    AuthService.signOut().then(response => {\n      if (response.status === 200) {\n        destroyCookie(null, AUTH_COOKIE_NAME, { path: '/' })\n        setUserData({ ...defaultUserData, isAuthenticated: false })\n        router.push(getAsPathByRouteName('auth-login'))\n      }\n    })\n  }\n\n  return (\n    <userContext.Provider value={{ userData, signInWithToken, signOut }}>\n      {children}\n    </userContext.Provider>\n  )\n}\n\nfunction getDataFromToken(token) {\n  if (token === null || token === false) return ''\n\n  return jwtDecode(token)\n}\n"]},"metadata":{},"sourceType":"module"}