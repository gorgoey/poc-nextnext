{"ast":null,"code":"import trimStart from 'lodash/trimStart';\nimport routes from \"../../modules/_router\";\nexport function getAsPathByRouteName(route) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pathname = routes[route];\n  return getAsPathByPathName(pathname, params);\n}\nexport function getAsPathByPathName(pathname) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var unusedParams = '';\n  var asPath = Object.keys(params).reduce(function (prev, cur) {\n    var inUsed = pathname.indexOf(\"[\".concat(cur, \"]\"));\n\n    if (inUsed === -1) {\n      unusedParams = unusedParams + \"&\".concat(cur, \"=\").concat(params[cur]);\n    }\n\n    return \"\".concat(prev.replace(\"[\".concat(cur, \"]\"), params[cur]));\n  }, pathname);\n  var queryString = unusedParams !== '' ? '?' + trimStart(unusedParams, '&') : '';\n  return \"\".concat(asPath).concat(queryString);\n}\nexport function getHrefByRouteName(route) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    pathname: routes[route],\n    query: params\n  };\n}\nexport function getRouteByPathname(pathname) {\n  var instantPathname = pathname;\n  if (pathname.substr(-1) !== '/') instantPathname = pathname + '/';\n  return Object.keys(routes).find(function (key) {\n    return routes[key] === instantPathname;\n  });\n}","map":{"version":3,"sources":["/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/lib/router/utils.js"],"names":["trimStart","routes","getAsPathByRouteName","route","params","pathname","getAsPathByPathName","unusedParams","asPath","Object","keys","reduce","prev","cur","inUsed","indexOf","replace","queryString","getHrefByRouteName","query","getRouteByPathname","instantPathname","substr","find","key"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,MAAP;AAEA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAkD;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACvD,MAAMC,QAAQ,GAAGJ,MAAM,CAACE,KAAD,CAAvB;AACA,SAAOG,mBAAmB,CAACD,QAAD,EAAWD,MAAX,CAA1B;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BD,QAA7B,EAAoD;AAAA,MAAbD,MAAa,uEAAJ,EAAI;AACzD,MAAIG,YAAY,GAAG,EAAnB;AAEA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,MAApB,CAA2B,UAACC,IAAD,EAAOC,GAAP,EAAe;AACvD,QAAMC,MAAM,GAAGT,QAAQ,CAACU,OAAT,YAAqBF,GAArB,OAAf;;AACA,QAAIC,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACjBP,MAAAA,YAAY,GAAGA,YAAY,cAAOM,GAAP,cAAcT,MAAM,CAACS,GAAD,CAApB,CAA3B;AACD;;AAED,qBAAUD,IAAI,CAACI,OAAL,YAAiBH,GAAjB,QAAyBT,MAAM,CAACS,GAAD,CAA/B,CAAV;AACD,GAPc,EAOZR,QAPY,CAAf;AASA,MAAMY,WAAW,GACfV,YAAY,KAAK,EAAjB,GAAsB,MAAMP,SAAS,CAACO,YAAD,EAAe,GAAf,CAArC,GAA2D,EAD7D;AAGA,mBAAUC,MAAV,SAAmBS,WAAnB;AACD;AAED,OAAO,SAASC,kBAAT,CAA4Bf,KAA5B,EAAgD;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACrD,SAAO;AAAEC,IAAAA,QAAQ,EAAEJ,MAAM,CAACE,KAAD,CAAlB;AAA2BgB,IAAAA,KAAK,EAAEf;AAAlC,GAAP;AACD;AAED,OAAO,SAASgB,kBAAT,CAA4Bf,QAA5B,EAAsC;AAC3C,MAAIgB,eAAe,GAAGhB,QAAtB;AAEA,MAAIA,QAAQ,CAACiB,MAAT,CAAgB,CAAC,CAAjB,MAAwB,GAA5B,EAAiCD,eAAe,GAAGhB,QAAQ,GAAG,GAA7B;AAEjC,SAAOI,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBsB,IAApB,CAAyB,UAAAC,GAAG;AAAA,WAAIvB,MAAM,CAACuB,GAAD,CAAN,KAAgBH,eAApB;AAAA,GAA5B,CAAP;AACD","sourcesContent":["import trimStart from 'lodash/trimStart'\nimport routes from '@modules/_router'\n\nexport function getAsPathByRouteName(route, params = {}) {\n  const pathname = routes[route]\n  return getAsPathByPathName(pathname, params)\n}\n\nexport function getAsPathByPathName(pathname, params = {}) {\n  let unusedParams = ''\n\n  const asPath = Object.keys(params).reduce((prev, cur) => {\n    const inUsed = pathname.indexOf(`[${cur}]`)\n    if (inUsed === -1) {\n      unusedParams = unusedParams + `&${cur}=${params[cur]}`\n    }\n\n    return `${prev.replace(`[${cur}]`, params[cur])}`\n  }, pathname)\n\n  const queryString =\n    unusedParams !== '' ? '?' + trimStart(unusedParams, '&') : ''\n\n  return `${asPath}${queryString}`\n}\n\nexport function getHrefByRouteName(route, params = {}) {\n  return { pathname: routes[route], query: params }\n}\n\nexport function getRouteByPathname(pathname) {\n  let instantPathname = pathname\n\n  if (pathname.substr(-1) !== '/') instantPathname = pathname + '/'\n\n  return Object.keys(routes).find(key => routes[key] === instantPathname)\n}\n"]},"metadata":{},"sourceType":"module"}