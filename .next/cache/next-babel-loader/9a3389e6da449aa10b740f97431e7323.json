{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from 'react';\nexport default function FetchMore(_ref) {\n  _s();\n\n  var children = _ref.children,\n      service = _ref.service,\n      start = _ref.start,\n      limit = _ref.limit;\n\n  var _useState = useState(start),\n      lastStart = _useState[0],\n      setLastStart = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isDone = _useState3[0],\n      setIsDone = _useState3[1];\n\n  var _useState4 = useState([]),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var fetchMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.next = 3;\n              return service({\n                start: lastStart,\n                limit: limit\n              });\n\n            case 3:\n              newData = _context.sent;\n              setIsLoading(false);\n              setLastStart(lastStart + newData.length);\n              setData(data.concat(newData));\n\n              if (newData.length < limit) {\n                setIsDone(true);\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return children({\n    data: data,\n    fetchMore: fetchMore,\n    isLoading: isLoading,\n    isDone: isDone\n  });\n}\n\n_s(FetchMore, \"+Ef+i+Xed2OG3JwlYkrt9+g2G9Y=\");\n\n_c = FetchMore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchMore\");","map":{"version":3,"sources":["/Volumes/Backup HD/frontend/poc-next-web/poc-nextnext/src/lib/api/FetchMore.js"],"names":["useState","FetchMore","children","service","start","limit","lastStart","setLastStart","isLoading","setIsLoading","isDone","setIsDone","data","setData","fetchMore","newData","length","concat"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,SAAT,OAAwD;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBACnCL,QAAQ,CAACI,KAAD,CAD2B;AAAA,MAC9DE,SAD8D;AAAA,MACnDC,YADmD;;AAAA,mBAEnCP,QAAQ,CAAC,KAAD,CAF2B;AAAA,MAE9DQ,SAF8D;AAAA,MAEnDC,YAFmD;;AAAA,mBAGzCT,QAAQ,CAAC,KAAD,CAHiC;AAAA,MAG9DU,MAH8D;AAAA,MAGtDC,SAHsD;;AAAA,mBAI7CX,QAAQ,CAAC,EAAD,CAJqC;AAAA,MAI9DY,IAJ8D;AAAA,MAIxDC,OAJwD;;AAMrE,MAAMC,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBL,cAAAA,YAAY,CAAC,IAAD,CAAZ;AADgB;AAAA,qBAEMN,OAAO,CAAC;AAAEC,gBAAAA,KAAK,EAAEE,SAAT;AAAoBD,gBAAAA,KAAK,EAALA;AAApB,eAAD,CAFb;;AAAA;AAEVU,cAAAA,OAFU;AAGhBN,cAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,cAAAA,YAAY,CAACD,SAAS,GAAGS,OAAO,CAACC,MAArB,CAAZ;AACAH,cAAAA,OAAO,CAACD,IAAI,CAACK,MAAL,CAAYF,OAAZ,CAAD,CAAP;;AAEA,kBAAIA,OAAO,CAACC,MAAR,GAAiBX,KAArB,EAA4B;AAC1BM,gBAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AATe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATG,SAAS;AAAA;AAAA;AAAA,KAAf;;AAYA,SAAOZ,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,SAAS,EAATA,SAAR;AAAmBN,IAAAA,SAAS,EAATA,SAAnB;AAA8BE,IAAAA,MAAM,EAANA;AAA9B,GAAD,CAAf;AACD;;GAnBuBT,S;;KAAAA,S","sourcesContent":["import { useState } from 'react'\n\nexport default function FetchMore({ children, service, start, limit }) {\n  const [lastStart, setLastStart] = useState(start)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isDone, setIsDone] = useState(false)\n  const [data, setData] = useState([])\n\n  const fetchMore = async () => {\n    setIsLoading(true)\n    const newData = await service({ start: lastStart, limit })\n    setIsLoading(false)\n    setLastStart(lastStart + newData.length)\n    setData(data.concat(newData))\n\n    if (newData.length < limit) {\n      setIsDone(true)\n    }\n  }\n\n  return children({ data, fetchMore, isLoading, isDone })\n}\n"]},"metadata":{},"sourceType":"module"}