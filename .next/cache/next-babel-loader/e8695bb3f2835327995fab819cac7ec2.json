{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { parseCookies, setCookie, destroyCookie } from 'nookies';\nimport jwtDecode from 'jwt-decode';\nimport { getAsPathByRouteName } from \"../router/utils\";\nimport * as AuthService from \"../../modules/_auth/services\";\nimport { AUTH_COOKIE_NAME, AUTH_COOKIE_MAX_AGE } from \"../../modules/_auth/config\";\nvar defaultUserData = {\n  isAuthenticated: null,\n  profile: null,\n  token: null\n};\nvar userContext = /*#__PURE__*/React.createContext({});\nexport function useMember() {\n  return useContext(userContext);\n}\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  var router = useRouter();\n\n  var _useState = useState(defaultUserData),\n      userData = _useState[0],\n      setUserData = _useState[1]; // Initialize user data\n\n\n  useEffect(function () {\n    var cookies = parseCookies();\n    var tokenInCookie = cookies[AUTH_COOKIE_NAME]; // Auto login if the user has token in cookie\n\n    if (tokenInCookie !== undefined) {\n      signInWithToken(tokenInCookie);\n    } else {\n      setUserData(_objectSpread(_objectSpread({}, defaultUserData), {}, {\n        isAuthenticated: false\n      }));\n    }\n  }, []); // Save token to cookie after sign in\n\n  useEffect(function () {\n    var isAuthenticated = userData.isAuthenticated,\n        token = userData.token;\n    var cookies = parseCookies();\n    var tokenInCookie = cookies[AUTH_COOKIE_NAME];\n\n    if (isAuthenticated === true && token !== null && !tokenInCookie) {\n      var payload = getDataFromToken(token);\n      var expires = (payload === null || payload === void 0 ? void 0 : payload.exp) || Math.floor(Date.now() / 1000) + AUTH_COOKIE_MAX_AGE;\n      setCookie(null, AUTH_COOKIE_NAME, token, {\n        path: '/',\n        expires: new Date(expires * 1000)\n      });\n    }\n  }, [userData.isAuthenticated]);\n\n  var signInWithToken = function signInWithToken(token) {\n    setUserData({\n      isAuthenticated: token === null ? null : !!token,\n      profile: getDataFromToken(token),\n      token: token\n    });\n  };\n\n  var signOut = function signOut() {\n    AuthService.signOut().then(function (response) {\n      if (response.status === 200) {\n        destroyCookie(null, AUTH_COOKIE_NAME, {\n          path: '/'\n        });\n        setUserData(_objectSpread(_objectSpread({}, defaultUserData), {}, {\n          isAuthenticated: false\n        }));\n        router.push(getAsPathByRouteName('auth-login'));\n      }\n    });\n  };\n\n  return _jsx(userContext.Provider, {\n    value: {\n      userData: userData,\n      signInWithToken: signInWithToken,\n      signOut: signOut\n    },\n    children: children\n  });\n}\n\nfunction getDataFromToken(token) {\n  if (token === null || token === false) return '';\n  return jwtDecode(token);\n}","map":null,"metadata":{},"sourceType":"module"}