{"ast":null,"code":"import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport React from 'react';\nimport get from 'lodash/get';\nimport Error404Page from \"../../components/_pages/_error/404\";\nimport Error500Page from \"../../components/_pages/_error/500\";\nexport function withErrorHandling(getServerSideProps) {\n  return async context => {\n    let pageProps = {};\n\n    try {\n      pageProps = await getServerSideProps(context);\n    } catch (error) {\n      console.error(error);\n      const statusCode = get(error, 'response.status', 500);\n      const errorCode = get(error, 'response.errorCode', '');\n\n      if (context.res) {\n        context.res.statusCode = statusCode;\n      }\n\n      pageProps.props = {\n        statusCode,\n        errorCode\n      };\n    }\n\n    return pageProps;\n  };\n}\nexport class ErrorProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hasRuntimeError: false,\n      error: {}\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    const errorResponse = get(error, 'response', {});\n    return {\n      hasRuntimeError: true,\n      error: errorResponse\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('Runtime Error:', error, errorInfo);\n  }\n\n  render() {\n    const statusCode = get(this.props.children, 'props.statusCode', 200); // If any runtime error\n\n    if (this.state.hasRuntimeError) {\n      return _jsx(Error500Page, {\n        errorCode: this.state.error.errorCode\n      });\n    } // If any error\n\n\n    if (statusCode >= 500) {\n      return _jsx(Error500Page, {});\n    } // If api path not found\n\n\n    if (statusCode >= 400) {\n      const errorCode = get(this.props, 'errorCode', '');\n      return _jsx(Error404Page, {\n        errorCode: errorCode\n      });\n    }\n\n    return this.props.children;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}